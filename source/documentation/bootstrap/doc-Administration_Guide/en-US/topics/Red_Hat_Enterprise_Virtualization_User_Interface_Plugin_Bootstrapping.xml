<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Administration_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="Red_Hat_Enterprise_Virtualization_User_Interface_Plugin_Bootstrapping" remap="TID_14125">
	<title>Red Hat Virtualization User Interface Plug-in Bootstrapping</title>
	<para>
		A typical plug-in bootstrap sequence consists of following steps:
	</para>
	<procedure>
		<title>Plug-in Bootstrap Sequence</title>
		<step>
			<para>
				Obtain pluginApi instance for the given plug-in
			</para>
		</step>
		<step>
			<para>
				Obtain runtime plug-in configuration object (optional)
			</para>
		</step>
		<step>
			<para>
				Register relevant event handler functions
			</para>
		</step>
		<step>
			<para>
				Notify UI plug-in infrastructure to proceed with plug-in initialization
			</para>
		</step>
	</procedure>
	<para>
		The following code snippet illustrates the above mentioned steps in practice:
	</para>
	<screen>
// Access plug-in API using 'parent' due to this code being evaluated within the context of an iframe element.
// As 'parent.pluginApi' is subject to Same-Origin Policy, this will only work when WebAdmin HTML page and plug-in
// host page are served from same origin. WebAdmin HTML page and plug-in host page will always be on same origin
// when using UI plug-in infrastructure support to serve plug-in resource files.
var api = parent.pluginApi('MyPlugin');

// Runtime configuration object associated with the plug-in (or an empty object).
var config = api.configObject();

// Register event handler function(s) for later invocation by UI plug-in infrastructure.
api.register({
	    // UiInit event handler function.
		UiInit: function() {
				// Handle UiInit event.
					window.alert('Favorite music band is ' + config.band);
					    }
});

// Notify UI plug-in infrastructure to proceed with plug-in initialization.
api.ready();
</screen>
</section>

