<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Administration_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="Configuring_LDAP_and_Kerberos_for_Single_Sign-on">
	<title>Configuring LDAP and Kerberos for Single Sign-on</title>
			<para>
				 Single sign-on allows users to log in to the User Portal or the Administration Portal without re-typing their passwords. Authentication credentials are obtained from the Kerberos server. To configure single sign-on to the Administration Portal and the User Portal, you need to configure two extensions: <filename>ovirt-engine-extension-aaa-misc</filename> and <filename>ovirt-engine-extension-aaa-ldap</filename>; and two Apache modules: <filename>mod_auth_gssapi</filename> and <filename>mod_session</filename>. You can configure single sign-on that does not involve Kerberos, however this is outside the scope of this documentation. <!--More information can be found in the README file. -->
     </para>
			<note>
				<para>
					If single sign-on to the User Portal is enabled, single sign-on to virtual machines will not be possible. With single sign-on to the User Portal enabled, the User Portal does not need to accept a password, thus the password cannot be delegated to sign in to virtual machines.
				</para>
			</note>
	<para>
		This example assumes the following: 
		<itemizedlist>
			<listitem>
				<para>
					The existing Key Distribution Center (KDC) server uses the MIT version of Kerberos 5.
				</para>
			</listitem>
			<listitem>
				<para>
					You have administrative rights to the KDC server.
				</para>
			</listitem>
			<listitem>
				<para>
					The Kerberos client is installed on the Red Hat Virtualization Manager and user machines.
				</para>
			</listitem>
			<listitem>
				<para>
					The <command>kadmin</command> utility is used to create Kerberos service principals and <systemitem>keytab</systemitem> files.
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		This procedure involves the following components:
	</para> 
	<itemizedlist>
		<title>On the KDC server</title>
		<listitem>
			<para>
				Create a service principal and a <systemitem>keytab</systemitem> file for the Apache service on the Red Hat Virtualization Manager.
			</para>
		</listitem>
	</itemizedlist>
	<itemizedlist>
		<title>On the Red Hat Virtualization Manager</title>
		<listitem>
			<para>
				Install the authentication and authorization extension packages and the Apache Kerberos authentication module.
			</para>
		</listitem>
		<listitem>
			<para>
				Configure the extension files.
			</para>
		</listitem>
	</itemizedlist>
	<procedure>
		<title>Configuring Kerberos for the Apache Service</title>
		<step>
			<para>
				On the KDC server, use the <command>kadmin</command> utility to create a service principal for the Apache service on the Red Hat Virtualization Manager. The service principal is a reference ID to the KDC for the Apache service.
			</para>
			<screen># kadmin
kadmin&gt; addprinc -randkey <replaceable>HTTP/fqdn-of-rhevm</replaceable>@<replaceable>REALM.COM</replaceable></screen>
		</step>
		<step>
			<para>
				Generate a <systemitem>keytab</systemitem> file for the Apache service. The <systemitem>keytab</systemitem> file stores the shared secret key.
			</para>
			<screen>kadmin&gt; ktadd -k <replaceable>/tmp/http.keytab</replaceable> <replaceable>HTTP/fqdn-of-rhevm</replaceable>@<replaceable>REALM.COM</replaceable></screen>
			<screen>kadmin&gt; quit</screen>
		</step>
		<step>
			<para>
				Copy the <systemitem>keytab</systemitem> file from the KDC server to the Red Hat Virtualization Manager:
			</para>
			<screen># scp <replaceable>/tmp/http.keytab</replaceable> root@<replaceable>rhevm.example.com:/etc/httpd</replaceable></screen>
		</step>
	</procedure>
	<procedure>
		<title>Configuring Single Sign-on to the User Portal or Administration Portal</title>
		<step>
			<para>
				On the Red Hat Virtualization Manager, ensure that the ownership and permissions for the keytab are appropriate:
			</para>
			<screen># chown apache <replaceable>/etc/httpd/http.keytab</replaceable></screen>
			<screen># chmod 400 <replaceable>/etc/httpd/http.keytab</replaceable></screen>
		</step>
		<step>
			<para>
				Install the authentication extension package, LDAP extension package, and the <literal>mod_auth_gssapi</literal> and  <literal>mod_session</literal> Apache modules:
			</para>
			<screen># yum install ovirt-engine-extension-aaa-misc ovirt-engine-extension-aaa-ldap mod_auth_gssapi mod_session</screen>
		</step>
		<step>
			<para>
				Copy the SSO configuration template file into the <filename>/etc/ovirt-engine</filename> directory. Template files are available for Active Directory (<filename>ad-sso</filename>) and other directory types (<filename>simple-sso</filename>). This example uses the simple SSO configuration template.
			</para>
			<screen># cp -r /usr/share/ovirt-engine-extension-aaa-ldap/examples/simple-sso/. /etc/ovirt-engine</screen>
		</step>
		<step>
			<para>
				Move <filename>ovirt-sso.conf</filename> into the Apache configuration directory:
			</para>
			<screen># mv /etc/ovirt-engine/aaa/ovirt-sso.conf /etc/httpd/conf.d</screen>
		</step>
		<step>
			<para>
				Review the authentication method file. You do not need to edit this file, as the realm is automatically fetched from the <systemitem>keytab</systemitem> file. 
			</para>
			<screen># vi /etc/httpd/conf.d/ovirt-sso.conf</screen>
			<example>
				<title>Example authentication method file</title>
				<screen>&lt;LocationMatch ^/ovirt-engine/sso/(interactive-login-negotiate|oauth/token-http-auth)|^/ovirt-engine/api&gt;
  &lt;If "req('Authorization') !~ /^(Bearer|Basic)/i"&gt;
    RewriteEngine on
    RewriteCond %{LA-U:REMOTE_USER} ^(.*)$
    RewriteRule ^(.*)$ - [L,NS,P,E=REMOTE_USER:%1]
    RequestHeader set X-Remote-User %{REMOTE_USER}s

    AuthType GSSAPI
    AuthName "Kerberos Login"

    # Modify to match installation
    GssapiCredStore keytab:/etc/httpd/http.keytab
    GssapiUseSessions On
    Session On
    SessionCookieName ovirt_gssapi_session path=/private;httponly;secure;
	
    Require valid-user
    ErrorDocument 401 "&lt;html&gt;&lt;meta http-equiv=\"refresh\" content=\"0; url=/ovirt-engine/sso/login-unauthorized\"/&gt;&lt;body&gt;&lt;a href=\"/ovirt-engine/sso/login-unauthorized\"&gt;Here&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
  &lt;/If&gt;
&lt;/LocationMatch&gt;</screen>
			</example> 
		</step>
    <step>
      <para>Rename the configuration files to match the profile name you want visible to users on the Administration Portal and the User Portal login pages:</para>
       <screen># mv /etc/ovirt-engine/aaa/profile1.properties /etc/ovirt-engine/aaa/<replaceable>example</replaceable>.properties</screen>
			 <screen># mv /etc/ovirt-engine/extensions.d/profile1-http-authn.properties /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-authn.properties</screen>
			 <screen># mv /etc/ovirt-engine/extensions.d/profile1-http-mapping.properties /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-mapping.properties</screen>
			 <screen># mv /etc/ovirt-engine/extensions.d/profile1-authz.properties /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-authz.properties</screen>
    </step>
		<step>
			<para>
				Edit the LDAP property configuration file by uncommenting an LDAP server type and updating the domain and passwords fields:
			</para>
			<screen>#  vi /etc/ovirt-engine/aaa/<replaceable>example</replaceable>.properties</screen>
			<example>
				<title>Example profile: LDAP server section </title>
				<screen># Select one
include = &lt;openldap.properties&gt;
#include = &lt;389ds.properties&gt;
#include = &lt;rhds.properties&gt;
#include = &lt;ipa.properties&gt;
#include = &lt;iplanet.properties&gt;
#include = &lt;rfc2307-389ds.properties&gt;
#include = &lt;rfc2307-rhds.properties&gt;
#include = &lt;rfc2307-openldap.properties&gt;
#include = &lt;rfc2307-edir.properties&gt;
#include = &lt;rfc2307-generic.properties&gt;

# Server
#
vars.server = <replaceable>ldap1.company.com</replaceable>

# Search user and its password.
#
vars.user = uid=search,cn=users,cn=accounts,dc=company,dc=com
vars.password = <replaceable>123456</replaceable>

pool.default.serverset.single.server = ${global:vars.server}
pool.default.auth.simple.bindDN = ${global:vars.user}
pool.default.auth.simple.password = ${global:vars.password}
</screen>
			</example>
			<para>
				To use TLS or SSL protocol to interact with the LDAP server, obtain the root CA certificate for the LDAP server and use it to create a public keystore file. Uncomment the following lines and specify the full path to the public keystore file and the password to access the file. 
				<note>
					<para>
						For more information on creating a public keystore file, see <xref linkend="Setting_Up_SSL_or_TLS_Connections_between_the_Manager_and_an_LDAP_Server" />.
					</para>
				</note>
			</para>
			<example>
				<title>Example profile: keystore section</title>
				<screen># Create keystore, import certificate chain and uncomment
# if using ssl/tls.
pool.default.ssl.startTLS = true
pool.default.ssl.truststore.file = <replaceable>/full/path/to/myrootca.jks</replaceable>
pool.default.ssl.truststore.password = <replaceable>password</replaceable></screen>
			</example>
		</step>
		<step>
			<para>
				Review the authentication configuration file. The profile name visible to users on the Administration Portal and the User Portal login pages is defined by <systemitem>ovirt.engine.aaa.authn.profile.name</systemitem>. The configuration profile location must match the LDAP configuration file location. All fields can be left as default.
			</para>
			<screen># vi /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-authn.properties</screen>
			<example>
				<title>Example authentication configuration file</title>
				<screen>ovirt.engine.extension.name = <replaceable>example</replaceable>-http-authn
ovirt.engine.extension.bindings.method = jbossmodule
ovirt.engine.extension.binding.jbossmodule.module = org.ovirt.engine-extensions.aaa.misc
ovirt.engine.extension.binding.jbossmodule.class = org.ovirt.engineextensions.aaa.misc.http.AuthnExtension
ovirt.engine.extension.provides = org.ovirt.engine.api.extensions.aaa.Authn
ovirt.engine.aaa.authn.profile.name = <replaceable>example</replaceable>-http
ovirt.engine.aaa.authn.authz.plugin = <replaceable>example</replaceable>-authz
ovirt.engine.aaa.authn.mapping.plugin = <replaceable>example</replaceable>-http-mapping
config.artifact.name = HEADER
config.artifact.arg = X-Remote-User</screen>
			</example>
		</step>
		<step>
			<para>
				Review the authorization configuration file. The configuration profile location must match the LDAP configuration file location. All fields can be left as default.
			</para>
			<screen>#  vi /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-authz.properties</screen>
			<example>
				<title>Example authorization configuration file</title>
				<screen>ovirt.engine.extension.name = <replaceable>example</replaceable>-authz
ovirt.engine.extension.bindings.method = jbossmodule
ovirt.engine.extension.binding.jbossmodule.module = org.ovirt.engine-extensions.aaa.ldap
ovirt.engine.extension.binding.jbossmodule.class = org.ovirt.engineextensions.aaa.ldap.AuthzExtension
ovirt.engine.extension.provides = org.ovirt.engine.api.extensions.aaa.Authz
config.profile.file.1 = ../aaa/<replaceable>example</replaceable>.properties</screen>
			</example>
		</step>
		<step>
		  <para>
		    Review the authentication mapping configuration file. The configuration profile location must match the LDAP configuration file location. The configuration profile extension name must match the <literal>ovirt.engine.aaa.authn.mapping.plugin</literal> value in the authentication configuration file. All fields can be left as default.
		  </para>
			<screen># vi /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-mapping.properties</screen>
			<example>
				<title>Example authentication mapping configuration file</title>
				<screen>ovirt.engine.extension.name = <replaceable>example</replaceable>-http-mapping
ovirt.engine.extension.bindings.method = jbossmodule
ovirt.engine.extension.binding.jbossmodule.module = org.ovirt.engine-extensions.aaa.misc
ovirt.engine.extension.binding.jbossmodule.class = org.ovirt.engineextensions.aaa.misc.mapping.MappingExtension
ovirt.engine.extension.provides = org.ovirt.engine.api.extensions.aaa.Mapping
config.mapAuthRecord.type = regex
config.mapAuthRecord.regex.mustMatch = true
config.mapAuthRecord.regex.pattern = ^(?&lt;user&gt;.*?)((\\\\(?&lt;at&gt;@)(?&lt;suffix&gt;.*?)@.*)|(?&lt;realm&gt;@.*))$
config.mapAuthRecord.regex.replacement = ${user}${at}${suffix}</screen>
			</example>
		</step>
		<step>
			<para>
				Ensure that the ownership and permissions of the configuration files are appropriate:
			</para>
			<screen># chown ovirt:ovirt /etc/ovirt-engine/aaa/<replaceable>example</replaceable>.properties</screen>
			<screen># chown ovirt:ovirt /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-authn.properties</screen>
			<screen># chown ovirt:ovirt /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-mapping.properties</screen>
			<screen># chown ovirt:ovirt /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-authz.properties</screen>
			<screen># chmod 600 /etc/ovirt-engine/aaa/<replaceable>example</replaceable>.properties</screen>
			<screen># chmod 640 /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-authn.properties</screen>
			<screen># chmod 640 /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-http-mapping.properties</screen>
			<screen># chmod 640 /etc/ovirt-engine/extensions.d/<replaceable>example</replaceable>-authz.properties</screen>
		</step>
		<step>
			<para>
				Restart the Apache service and the <literal>ovirt-engine</literal> service:
			</para>
			<screen># systemctl restart httpd.service</screen>
			<screen># systemctl restart ovirt-engine.service</screen>
		</step>
	</procedure>
</section>
